/* Atom.pmc
 *  Copyright (C) 2010, Parrot Foundation.
 *  SVN Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the Atom base class
 *  Data Structure and Algorithms:
 *  History:
 *  Notes:
 *     Please remove unneeded entries.
 *  References:
 */

#include "parrot/parrot.h"

pmclass Atom extends scalar provides scalar auto_attrs dynpmc {
    ATTR STRING * atom_val;
/*
    void add_attribute(STRING* name, PMC* type) {
    }

    void add_method(STRING* method_name, PMC* sub_pmc) {
    }

    void add_parent(PMC* parent) {
    }

    void add_role(PMC* role) {
    }

    void add_vtable_override(STRING* vtable_name, PMC* sub_pmc) {
    }

    void assign_pmc(PMC* value) {
    }

    void assign_string_native(STRING* value) {
    }

    INTVAL can(STRING* method) {
        return (INTVAL)0;
    }
*/
    PMC* clone() {
        return PMCNULL;
    }

    PMC* clone_pmc(PMC* args) {
        return PMCNULL;
    }

    INTVAL cmp(PMC* value) {
        return (INTVAL)0;
    }

    INTVAL cmp_num(PMC* value) {
        return (INTVAL)0;
    }

    PMC* cmp_pmc(PMC* value) {
        return PMCNULL;
    }

    INTVAL cmp_string(PMC* value) {
        return (INTVAL)0;
    }
/*
    INTVAL defined() {
        return (INTVAL)0;
    }

    void destroy() {
    }

    INTVAL does(STRING* role) {
        return (INTVAL)0;
    }

    INTVAL does_pmc(PMC* role) {
        return (INTVAL)0;
    }

    PMC* find_method(STRING* method_name) {
        return PMCNULL;
    }

    void freeze(PMC* info) {
    }

    PMC* get_attr_str(STRING* idx) {
        return PMCNULL;
    }
*/
    VTABLE INTVAL get_bool() {
        /*returns 1 if string == true, 0 otherwise*/
        STRING *atom_val;
        GET_ATTR_atom_val(INTERP, SELF, atom_val);
        if atom_val == "false" {
            return (INTVAL)0;
        }
        return (INTVAL)1;
    }

    PMC* get_class() {
        return PMCNULL;
    }

    INTVAL get_integer() {
        return (INTVAL)0;
    }

    PMC* get_iter() {
        return PMCNULL;
    }

    FLOATVAL get_number() {
        return (FLOATVAL)0;
    }

    PMC* get_pmc() {
        return PMCNULL;
    }

    void* get_pointer() {
        return (void*)0;
    }

    STRING* get_repr() {
        return SELF.get_string();
    }

    VTABLE STRING* get_string() {
        /*returns the string of the atom*/
        STRING *atom_val;
        GET_ATTR_atom_val(INTERP, SELF, atom_val);

        return atom_val;
    }

    INTVAL hashvalue() {
        return (INTVAL)0;
    }

    void i_absolute() {
    }

    void i_logical_not() {
    }

    void init() {
        SELF.set_string("false");
    }

    void init_int(INTVAL initializer) {
    }

    void init_pmc(PMC* value) {
        if (!PMC_IS_NULL(value)) {
            SELF.set_string_native(VTABLE_get_string(INTERP, value));
        }
        else {
            SELF.set_string_native("false");
        }
    }
/*
    PMC* inspect() {
        return PMCNULL;
    }

    PMC* inspect_str(STRING* what) {
        return PMCNULL;
    }

    PMC* instantiate(PMC* sig) {
        return PMCNULL;
    }

    opcode_t* invoke(void* next) {
        return (opcode_t*)0;
    }
*/
    INTVAL is_equal(PMC* value) {
        return (INTVAL)0;
    }

    INTVAL is_equal_num(PMC* value) {
        return (INTVAL)0;
    }

    INTVAL is_equal_string(PMC* value) {
        return (INTVAL)0;
    }

    INTVAL is_same(PMC* value) {
        return (INTVAL)0;
    }

    INTVAL isa(STRING* _class) {
        return (INTVAL)0;
    }

    INTVAL isa_pmc(PMC* _class) {
        return (INTVAL)0;
    }

    PMC* logical_and(PMC* value, PMC* dest) {
        return PMCNULL;
    }

    PMC* logical_not(PMC* dest) {
        return PMCNULL;
    }

    PMC* logical_or(PMC* value, PMC* dest) {
        return PMCNULL;
    }

    PMC* logical_xor(PMC* value, PMC* dest) {
        return PMCNULL;
    }

    void mark() {
    }
/*
    void morph(PMC* type) {
    }

    void remove_attribute(STRING* name) {
    }

    void remove_method(STRING* method_name) {
    }

    void remove_parent(PMC* parent) {
    }

    void remove_role(PMC* role) {
    }

    void remove_vtable_override(STRING* vtable_name) {
    }

    void set_attr_str(STRING* idx, PMC* value) {
    }

    void set_bool(INTVAL value) {
    }

    void set_integer_native(INTVAL value) {
    }

    void set_number_native(FLOATVAL value) {
    }

    void set_pointer(void* value) {
    }
*/
    void set_string_native(STRING* value) {
    }

    void share() {
    }

    PMC* share_ro() {
        return PMCNULL;
    }

    void thaw(PMC* info) {
    }

    void thawfinish(PMC* info) {
    }

    void visit(PMC* info) {
    }

}

/*
 * Local Variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
